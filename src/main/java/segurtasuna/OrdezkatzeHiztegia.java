/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package segurtasuna;

public class OrdezkatzeHiztegia {

    public String zifratu(String mezua){
        //mezua hartuz hiztegian oinarritutako zifraketa egingo du
        //Aurre: Mezua alfebetoko 26 karaktereak bakarrik izango ditu (mayus edo minus)
        //Post: Kriptograma lortu

        String mezuZif;
        String kripto = "";
        String gakoa = "ZXCVBNMASDFGHJKLQWERTYUIOP";
        char[] gakoaA = gakoa.toCharArray(); //gakoa array batera pasatu

        System.out.println("Hurrengo mezua enkriptatuko da:\n" + mezua +"\n");

        //Lehenengo mezua prestatuko dugu zifratu ahal izateko, hau da, letra larriak jarriz te hutsuneak kenduz
        mezuZif = this.hutsuneak(mezua);
        mezuZif = this.letraLarriak(mezuZif);

        //Ondoren, gakoa erabiliz letra berordenatuko ditugu kriptograma lortuz

        for(int i = 0; i < mezuZif.length(); i++){

            int ascii = mezuZif.charAt(i);
            int pos = ascii - 65; //gakoan izango duen posizioa
            kripto = kripto + gakoaA[pos];

        }

        System.out.println("Lortutako kriptograma:\n" + kripto +"\n");

        return kripto;

    }

    public String hutsuneak(String mezua){
        //mezua hartu eta hutsuneak kentzen dizkio
        //Aurre: Mezuak alfebetoko 26 karaktereak bakarrik izango ditu (mayus edo minus)
        //Post: Hutsune gabeko mezua lortu

        return mezua.replace(" ","");
    }

    public String letraLarriak(String mezua){
        //mezua hartu eta letra xeheak letra larriz aldatzen ditu
        //Aurre: Mezuak alfebetoko 26 karaktereak bakarrik izango ditu (mayus edo minus)
        //Post: Letra larriz osatutako mezua

        return mezua.toUpperCase();
    }

    public String deszifratu(String kripto){
        //kriptograma hartuz hiztegian oinarritutako deszifraketa egingo du
        //Aurre: Kriptogramak alfebetoko 26 karaktereak bakarrik izango ditu (mayus edo minus)
        //Post: Kriptograma lortu

        String kriptoOna;
        String mezua = "";
        String gakoa = "ZXCVBNMASDFGHJKLQWERTYUIOP";
        char[] gakoaA = gakoa.toCharArray(); //gakoa array batera pasatu

        System.out.println("Hurrengo kiptograma desenkriptatuko da:\n" + kripto +"\n");

        //Lehenengo mezua prestatuko dugu zifratu ahal izateko, hau da, letra larriak jarriz te hutsuneak kenduz
        kriptoOna = this.hutsuneak(kripto);
        kriptoOna = this.letraLarriak(kriptoOna);

        //Ondoren, gakoa erabiliz letra berordenatuko ditugu mezua lortuz (zifraketaren alderantziz)

        for(int i = 0; i < kriptoOna.length(); i++){

            int pos = this.posizioa(kriptoOna.charAt(i),gakoaA);
            char letra = (char)(65+pos);

            mezua = mezua + letra;
        }

        System.out.println("Mezua hurrengoa da:\n" + mezua +"\n");

        return mezua;
    }

    public int posizioa(char letra, char[] gakoaA){

        int i = 0;
        boolean aurkitua = false;

        while(!aurkitua){

            if(letra==gakoaA[i]){

                aurkitua = true;
            }
            else{

                i++;
            }
        }

        return i;
    }

    public static void main(String[] args) {
    }
}
